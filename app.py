# -*- coding: utf-8 -*-
"""APP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nIlAHr5t04CKz8YD0QGbnqKQh5xR-_5v
"""

import streamlit as st

# ✅ Page config
st.set_page_config(
    page_title="Student Exam Score Predictor",
    page_icon="🎓",
    layout="centered"
)

# 📦 Imports
import pandas as pd
import numpy as np
import joblib
import time
from streamlit_lottie import st_lottie
import requests
import os

# ✅ Lottie loader
@st.cache_data
def load_lottie_url(url):
    try:
        r = requests.get(url)
        if r.status_code != 200:
            return None
        return r.json()
    except:
        return None

# ✅ Load animations (handle None fallback)
success_animation = load_lottie_url("https://lottie.host/5ddf76a4-b979-4dd8-9d7f-8a420b5f8b58/m0rAa2DWCH.json")
fail_animation = load_lottie_url("https://lottie.host/9cdb6d55-c165-4e45-bd7f-1ceef7703eb1/kUR1DFeyGM.json")

# ✅ Load model safely
model = None
if os.path.exists("xgb_student_score_model.pkl"):
    try:
        model = joblib.load("xgb_student_score_model.pkl")
    except Exception as e:
        st.error(f"🚫 Failed to load model: {e}")

# ✅ Background styling
st.markdown("""
    <style>
    .stApp {
        background-image: url("https://media.istockphoto.com/id/1330963948/photo/chalkboard-with-back-to-school-symbols.jpg?s=612x612&w=0&k=20&c=npktCHPb4PMM0xH6DP3D-RjgP5Q6u_FTNy_yAeA875s=");
        background-attachment: fixed;
        background-size: cover;
        color: white;
    }
    h2, h3 {
        font-weight: bold;
        color: black !important;
    }
    </style>
""", unsafe_allow_html=True)

# ✅ Title and subtitle
st.markdown("<h1 style='text-align: center;'>🎓 Student Exam Score Predictor</h1>", unsafe_allow_html=True)
st.markdown("<h4 style='text-align: center;'>Get insights into factors influencing student performance</h4>", unsafe_allow_html=True)
st.markdown("---")

# ✅ Input form
with st.form("prediction_form"):
    st.markdown("### 📝 Enter Student Details")
    col1, col2 = st.columns(2)

    with col1:
        hours = st.slider("📘 Hours Studied", 0.0, 26.0, 2.0)
        attendance = st.slider("📅 Attendance (%)", 0, 100, 75)
        previous_scores = st.slider("📊 Previous Scores", 0, 100, 70)
        sleep = st.slider("🛌 Sleep Hours", 0, 12, 7)
        tutoring = st.slider("📖 Tutoring Sessions", 0, 10, 2)
        physical = st.slider("🏃 Physical Activity (hrs)", 0, 10, 1)
        distance = st.selectbox("📍 Distance from Home", ["Near", "Far"])
        extracurricular = st.selectbox("🎭 Extracurricular Activities", ["Yes", "No"])

    with col2:
        internet = st.selectbox("🌐 Internet Access", ["Yes", "No"])
        resources = st.selectbox("📚 Access to Resources", ["Low", "Medium", "High"])
        involvement = st.selectbox("👨‍👩‍👧 Parental Involvement", ["Low", "Medium", "High"])
        motivation = st.selectbox("💡 Motivation Level", ["Low", "Medium", "High"])
        family_income = st.selectbox("💰 Family Income", ["Low", "Medium", "High"])
        teacher_quality = st.selectbox("👩‍🏫 Teacher Quality", ["Low", "Medium", "High"])
        peer_influence = st.selectbox("👫 Peer Influence", ["Negative", "Neutral", "Positive"])
        learning_disability = st.selectbox("🧠 Learning Disabilities", ["Yes", "No"])
        education_level = st.selectbox("🎓 Parental Education Level", ["High School", "Bachelor", "Master", "PhD"])
        gender = st.selectbox("🚻 Gender", ["Male", "Female", "Other"])
        school_type = st.selectbox("🏫 School Type", ["Public", "Private"])

    submitted = st.form_submit_button("🔮 Predict Exam Score")

# ✅ Prediction logic
if submitted:
    if model is None:
        st.error("🚫 Model not loaded. Please check that 'xgb_student_score_model.pkl' exists.")
    else:
        try:
            input_dict = {
                'Hours_Studied': hours,
                'Attendance': attendance,
                'Previous_Scores': previous_scores,
                'Sleep_Hours': sleep,
                'Tutoring_Sessions': tutoring,
                'Physical_Activity': physical,
                'Distance_from_Home': distance,
                'Extracurricular_Activities': extracurricular,
                'Internet_Access': internet,
                'Access_to_Resources': resources,
                'Parental_Involvement': involvement,
                'Motivation_Level': motivation,
                'Family_Income': family_income,
                'Teacher_Quality': teacher_quality,
                'Peer_Influence': peer_influence,
                'Learning_Disabilities': learning_disability,
                'Parental_Education_Level': education_level,
                'Gender': gender,
                'School_Type': school_type
            }

            input_df = pd.DataFrame([input_dict])

            # Ensure proper dtype for strings
            for col in input_df.select_dtypes(include='object').columns:
                input_df[col] = input_df[col].astype(str)

            with st.spinner("⏳ Predicting..."):
                time.sleep(1.5)
                prediction = model.predict(input_df)[0]

                # Simple sanitization for prediction output
                if isinstance(prediction, (np.ndarray, list)):
                    prediction = prediction[0]

                status = "⚠️ Needs Improvement" if prediction < 40 else "✅ Satisfactory"

                # Show animation only if available
                if prediction < 40 and fail_animation:
                    st_lottie(fail_animation, height=250, key="fail_anim")
                elif success_animation:
                    st_lottie(success_animation, height=250, key="success_anim")

                st.markdown(f"<h2 style='text-align: center;'>🎯 Predicted Exam Score: <strong>{prediction:.2f} / 100</strong></h2>", unsafe_allow_html=True)
                st.markdown(f"<h3 style='text-align: center;'>{status}</h3>", unsafe_allow_html=True)

        except Exception as e:
            st.error(f"❌ Prediction Error: {e}")

# ✅ Footer
st.markdown("""
    <hr style="border: 1px solid white;">
    <div style="text-align: center; color: white; font-size: 16px;">
        Made with ❤️ by <strong>Diya Agnihotri</strong>
    </div>
""", unsafe_allow_html=True)

